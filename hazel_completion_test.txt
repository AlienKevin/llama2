CODE COMPLETION INSTRUCTIONS:\
- Reply with a functional, idiomatic replacement for the program hole marked '??' in the provided program sketch\
- Reply only with a single replacement term for the unqiue distinguished hole marked '??'\
- Reply only with code\
- DO NOT suggest more replacements for other holes in the sketch (marked '?'), or implicit holes\
- DO NOT include the program sketch in your reply\
- DO NOT include a period at the end of your response and DO NOT use markdown\
HAZEL SYNTAX NOTES:\
- Hazel uses C-style function application syntax, with parenthesis around comma-separated arguments\
- Function application is ALWAYS written using parentheses and commas: use 'function(arg1, arg2)'. DO NOT just use spaces between the function name and arguments.\
- Function parameters are ALWAYS commas separated: 'fun arg1, arg2 -> <exp>'. DO NOT use spaces to separate function arguments.\
- There is no dot accessor notation for tuples; DO NOT use tuple.field. use pattern matching for destructuring: let (field, _) = tuple in ...\
- The following ARE NOT Hazel keywords. DO NOT use these keywords: switch, with, of, rec. ALWAYS omit these keywords\
- Pattern matching is ALWAYS written a 'case ... end' expression. Cases MUST END in an 'end' keyword. DO NOT USE any other keyword besides 'case' to do pattern matching.  DO NOT USE a 'with' or 'of' keyword with 'case', just start the list of rules. Pattern matching rules use syntax '| pattern => expression'. Note the '=>' arrow.\
- The ONLY way to define a named function is by using a function expression nested in a let expression like 'let <pat> = fun <pat> -> <exp> in <exp'. There is no support for specifying the function arguments directly as part of the let. DO NOT write function arguments in the let pattern.\
- No 'rec' keyword is necessary for 'let' to define a recursive function. DO NOT use the 'rec' keyword with 'let'.\
- Format the code with proper linebreaks\
\
sketch: \
let List.length: [(String, Bool)]-> Int =\
  fun xs ->\
    ?? end in\
\
expected_ty: Hole ?? can be filled by an expression with a type consistent with Int which expands to Int\
\
completion:\
case xs\
| [] => 0\
| _::xs => 1 + List.length(xs)\
\
\
sketch: \
let List.mapi: ((Int, Bool) -> Bool, [Bool]) -> [Bool]=\
  fun f, xs ->\
    let go: (Int, [Bool])-> [Bool] = fun idx, xs ->\
      ?? end in\
    go(0, xs) in\
\
expected_ty: Hole ?? can be filled by an expression with a type consistent with [Bool] which expands to [Bool],\
\
completion:\
