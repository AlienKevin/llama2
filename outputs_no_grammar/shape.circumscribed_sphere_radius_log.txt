
================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =



================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
   


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->



================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
       


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape



================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
       


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        |


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | S


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r)


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) =>


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r



================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
       


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        |


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | C


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l)


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) =>


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l /


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0



================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
       


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        |


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | C


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cyl


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r,


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h)


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) =>


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h +


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0 *


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0 * r


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0 * r)


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0 * r) /


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0 * r) / 


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0 * r) / 4


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0 * r) / 4.


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0 * r) / 4.0


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0 * r) / 4.0 end


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0 * r) / 4.0 end in


================
type Radius = Float in
type SideLength = Float in
type Height = Float in

type Shape =
  + Sphere(Radius)
  + Cube(SideLength)
  + Cylinder(Radius, Height)
in

let circumscribed_sphere_radius: Shape -> Float =
    fun shape ->
        case shape
        | Sphere(r) => r
        | Cube(l) => l / 2.0
        | Cylinder(r, h) => (h + 2.0 * r) / 4.0 end in


