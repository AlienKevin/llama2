
================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =



================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
   


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1,


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->



================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
       


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1,


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2



================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
       


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        |


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x),


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y)


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) =>


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x ==


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y



================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
       


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        |


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x,


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1),


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y,


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2)


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) =>


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x ==


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y &&


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1,


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)



================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
       


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        |


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e1


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11,


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e1


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12),


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e2


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21,


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e2


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22)


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) =>


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e1


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11,


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e2


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21)


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) &&


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e1


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12,


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e2


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e22


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e22)


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e22)



================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e22)
       


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e22)
        |


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e22)
        | _


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e22)
        | _ =>


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e22)
        | _ => false


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e22)
        | _ => false end


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e22)
        | _ => false end in


================
# A simplified lambda calculus expression containing variables, lambdas, and applications #
type Exp =
  + Var(String)
  + Lam(String, Exp)
  + Ap(Exp, Exp)
in

# Check if two expressions are equal #
let Exp.eq: (Exp, Exp) -> Bool =
    fun e1, e2 ->
        case e1, e2
        | Var(x), Var(y) => x == y
        | Lam(x, e1), Lam(y, e2) => x == y && Exp.eq(e1, e2)
        | Ap(e11, e12), Ap(e21, e22) => Exp.eq(e11, e21) && Exp.eq(e12, e22)
        | _ => false end in


