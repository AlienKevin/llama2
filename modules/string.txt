let String.starts_with: (String, String) -> Bool =
    fun string, prefix ->
        if string_length(string) >= string_length(prefix) then
            let string_prefix = string_sub(string, 0, string_length(prefix)) in
            string_prefix $== prefix
        else
            false
in

let String.reverse: String -> String =
    fun string ->
        if string_length(string) <= 1 then
            string
        else
            string_sub(string, string_length(string) - 1, 1) ++ String.reverse(string_sub(string, 0, string_length(string) - 1))
in

type StringTransform =
    + Reverse
    + Trim
in

let String.transform: (String, [StringTransform]) -> String =
    fun string, transforms ->
        case transforms
        | [] => string
        | transform::rest =>
            let result =
                case transform
                | Reverse => String.reverse(string)
                | Trim =>
                    let starts_with_space = String.starts_with(string, " ") in
                    let ends_with_space = String.starts_with(String.reverse(string), " ") in
                    if starts_with_space && ends_with_space then
                        string_sub(string, 1, string_length(string) - 2)
                    else if starts_with_space then
                        string_sub(string, 1, string_length(string) - 1)
                    else if ends_with_space then
                        string_sub(string, 0, string_length(string) - 2)  
                    else
                        string
                end
            in
            String.transform(result, rest)
    end
in
test String.transform(" abc ", [Reverse, Trim]) $== "cba" end