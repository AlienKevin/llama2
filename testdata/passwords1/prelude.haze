# PASSWORD CHECKER MVU PRELUDE #

type PasswordCriteria =
  + MinLength(Int)
  + RequireUppercase
  + RequireLowercase 
in

type PasswordStrength =
  + Weak
  + Moderate
  + Strong 
in
      
type Password = String in
type Criteria = [PasswordCriteria] in
type Strength = PasswordStrength in
  
type Model = (Password, Criteria, Strength) in
  
let initialModel: Model =
  ("", [MinLength(8), RequireUppercase, RequireLowercase], Weak)
in
  
type Action =
  + UpdatePassword(String)
  + AddCriterion(PasswordCriteria)
  + RemoveCriterion(PasswordCriteria) 
in

let meetsMinLength: (String, Int) -> Bool =
  fun password, len ->
    string_length(password) >= len 
in

let hasUppercase: String -> Bool =
  fun password: Password ->
    let loop: String -> Bool =
      fun s: String ->
        if string_length(s) == 0 
        then false  
        else
          let first = string_sub(s, 0, 1) in
          if string_contains("ABCDEFGHIJKLMNOPQRSTUVWXYZ", first) 
          then true  
          else loop(string_sub(s, 1, string_length(s) - 1))  
    in loop(password)
in

let hasLowercase: Password -> Bool =
  fun password: Password ->
    let loop: String -> Bool =
      fun s: String ->
        if string_length(s) == 0
        then false 
        else
          let first = string_sub(s, 0, 1) in
          if string_contains("abcdefghijklmnopqrstuvwxyz", first)
          then true 
          else loop(string_sub(s, 1, string_length(s) - 1)) 
    in loop(password) 
in

let meetsCriterion: (Password, PasswordCriteria) -> Bool =
  fun password, criterion ->
    case criterion
    | MinLength(len) => meetsMinLength(password, len)
    | RequireUppercase => hasUppercase(password)
    | RequireLowercase => hasLowercase(password) 
    end 
in
          
let calculateStrength: (Password, [PasswordCriteria]) -> PasswordStrength =
  fun password, criteria ->
    let metCriteria = List.filter(
      fun c: PasswordCriteria -> meetsCriterion(password, c), criteria) in
    case List.length(metCriteria)
    | 0 => Weak
    | 1 => Weak
    | 2 => Moderate
    | _ => Strong 
    end 
in
