# Hazel Syntax Examples #

let String.starts_with: (String, String) -> Bool =
    fun string, prefix ->
        if string_length(string) >= string_length(prefix) then
            let string_prefix = string_sub(string, 0, string_length(prefix)) in
            string_prefix $== prefix
        else
            false
in

let String.reverse: String -> String =
    fun string ->
        if string_length(string) <= 1 then
            string
        else
            string_sub(string, string_length(string) - 1, 1) ++ String.reverse(string_sub(string, 0, string_length(string) - 1))
in

type StringTransform =
    + Reverse
    + Trim
in

let String.transform: (String, [StringTransform]) -> String =
    fun string, transforms ->
        case transforms
        | [] => string
        | transform::rest =>
            let result =
                case transform
                | Reverse => String.reverse(string)
                | Trim =>
                    let starts_with_space = String.starts_with(string, " ") in
                    let ends_with_space = String.starts_with(String.reverse(string), " ") in
                    if starts_with_space && ends_with_space then
                        string_sub(string, 1, string_length(string) - 2)
                    else if starts_with_space then
                        string_sub(string, 1, string_length(string) - 1)
                    else if ends_with_space then
                        string_sub(string, 0, string_length(string) - 2)  
                    else
                        string
                end
            in
            String.transform(result, rest)
    end
in

type Term =
    + Var(String)
    + Abs(String, Term)
    + App(Term, Term)
in

let term_to_string: Term -> String =
    fun term ->
        case term
            | Var(x) => x
            | Abs(x, body) => "(lambda " ++ x ++ ". " ++ term_to_string(body) ++ ")"
            | App(func, arg) => "(" ++ term_to_string(func) ++ " " ++ term_to_string(arg) ++ ")"
        end
in

let parse_term: String -> (Term, String) =
    fun string ->
        if String.starts_with(string, "(lambda ") then
            let keyword_length = string_length("(lambda ") in
            let var = string_sub(string, keyword_length, 1) in
            let body, rest_string = parse_term(string_sub(string, keyword_length + 3, string_length(string) - keyword_length - 3)) in
            # Skip the closing ) #
            let rest_string = string_sub(rest_string, 1, string_length(rest_string) - 1) in
            (Abs(var, body), rest_string)
        else
            if String.starts_with(string, "(") then
                let func, rest_string = parse_term(string_sub(string, 1, string_length(string) - 1)) in
                # Skip the space between func and arg #
                let rest_string = string_sub(rest_string, 1, string_length(rest_string) - 1) in
                let arg, rest_string = parse_term(rest_string) in
                # Skip the closing ) after arg #
                let rest_string = string_sub(rest_string, 1, string_length(rest_string) - 1) in
                (App(func, arg), rest_string)
            else
                (Var(string_sub(string, 0, 1)), string_sub(string, 1, string_length(string) - 1))
in
