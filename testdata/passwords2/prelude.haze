# PASSWORD CHECKER MVU PRELUDE #

type PasswordCriteria =
  + RequireUppercase
  + RequireLowercase
  + MinimumLength(Int)
  + RequireNumber
  + RequireSpecialChar in

type PasswordStrength =
  + Weak
  + Moderate
  + Strong in
      
type Password = String in
type Criteria = [PasswordCriteria] in
type Strength = PasswordStrength in
  
type Model = (Password, Criteria, Strength) in
  
let initialModel: Model = (
  "",
  [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ],
  Weak
) in

type Action =
  + UpdatePassword(String)
  + ClearCriteria
  + AddCriterion(PasswordCriteria)
  + RemoveCriterion(PasswordCriteria) in
    
let meetsMinLength: (String, Int) -> Bool =
  fun password, len ->
    string_length(password) >= len in
  
let hasFromSet: (String, String) -> Bool =
  fun password: Password, set: String ->
    let loop: String -> Bool =
      fun s: String ->
        if string_length(s) == 0 
        then false 
        else
          let first = string_sub(s, 0, 1) in
          if string_contains(set, first) 
          then true 
          else loop(string_sub(s, 1, string_length(s) - 1)) 
  in loop(password)
in

let hasUppercase: String -> Bool =
  fun password: Password ->
    hasFromSet(password, "ABCDEFGHIJKLMNOPQRSTUVWXYZ") in
    
let hasLowercase: Password -> Bool =
  fun password: Password ->
    hasFromSet(password, "abcdefghijklmnopqrstuvwxyz") in
        
let hasNumber: Password -> Bool =
  fun password: Password ->
    hasFromSet(password, "0123456789") in
          
let hasSpecialChar: Password -> Bool =
  fun password: Password ->
    hasFromSet(password, "!@#$%^&*()-_=+[]{}|;:,.<>?") in
  
let meetsCriterion: (Password, PasswordCriteria) -> Bool =
  fun password, criterion ->
    case criterion
    | RequireUppercase => hasUppercase(password)
    | RequireLowercase => hasLowercase(password)
    | MinimumLength(len) => meetsMinLength(password, len)
    | RequireNumber => hasNumber(password)
    | RequireSpecialChar => hasSpecialChar(password) 
  end in

let metCriteria: (Password, [PasswordCriteria]) -> [Bool] =
  fun password, criteria ->
    List.filter(
      fun c: PasswordCriteria -> meetsCriterion(password, c),
      criteria
    ) in
    
let strength_of: Int -> PasswordStrength =
  fun num_criteria_met ->
    case num_criteria_met
    | 0 => Weak
    | 1 => Weak
    | 2 => Weak
    | 3 => Moderate
    | 4 => Strong
    | _ => Strong 
    end in
      
let calculateStrength: (Password, [PasswordCriteria]) -> PasswordStrength =
  fun password, criteria ->
    strength_of(List.length(metCriteria(password, criteria))) in
