# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _ , ClearCriteria => (m@0@2)
  | _ , AddCriterion(c) =>
    let criteria = sin@1 in
      (m@0@1, c::sin@1, calculateStrength(m@0@0, sin@1))
  | _ , RemoveCriterion(c) =>
     let criteria = sin@1 in
       (m@0@2,
        if c == RequireUppercase then
          [RequireLowercase, MinimumLength(8)]
        else if c == RequireLowercase then
          [RequireUppercase, MinimumLength(8) ] 
        else if c == MinimumLength(8) then
          []
        else if c == RequireNumber then
          [MinimumLength(8) ]
        else if c == RequireSpecialChar then
          [MinimumLength(8) ]
        else
          [] @ sin@1,
        calculateStrength(m@0@0, sin@1))
  | (_ , UpdatePassword(password)) =>
    let strength = calculateStrength(password, m@1@2) in
      (m@0@0, password, strength)
  end
in
  
let view: Model -> HtmlNodeType_BodyContents_ElementContent_ElementContent_ElementContent_ElementContent_Element