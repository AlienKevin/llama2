let PlayListState.eq: (PlayListState, PlayListState) -> Bool =
  fun s1, s2 ->
    case s1, s2
    | Playing(i1), Playing(i2) => i1 == i2
    | PausedOn(i1), PausedOn(i2) => i1 == i2
    | NoSongSelected, NoSongSelected => true
    | _ => false
    end
in

let PlayList.eq: (PlayList, PlayList) -> Bool =
  fun p1, p2 ->
    PlayListState.eq(get_state(p1), get_state(p2)) &&
    List.eq(fun i1, i2 -> i1 == i2, get_songs(p1), get_songs(p2))
in

# Testing PlaySong #
test PlayList.eq(update(([0, 1, 2], NoSongSelected), PlaySong(0)), ([0, 1, 2], Playing(0))) end;
test PlayList.eq(update(([0, 1, 2], PausedOn(1)), PlaySong(1)), ([0, 1, 2], Playing(1))) end;
test PlayList.eq(update(([0, 1, 2], PausedOn(0)), PlaySong(1)), ([0, 1, 2], Playing(1))) end;

# Testing PauseCurrentSong #
test PlayList.eq(update(([0, 1, 2], NoSongSelected), PauseCurrentSong) ,([0, 1, 2], NoSongSelected)) end;
test PlayList.eq(update(([0, 1, 2], PausedOn(1)), PauseCurrentSong), ([0, 1, 2], PausedOn(1))) end;
test PlayList.eq(update(([0, 1, 2], Playing(0)), PauseCurrentSong), ([0, 1, 2], PausedOn(0))) end;

# Testing RemoveSong #
test PlayList.eq(update(([0, 1, 2], NoSongSelected), RemoveSong(0)), ([1, 2], NoSongSelected)) end;
test PlayList.eq(update(([0, 1, 2], Playing(0)), RemoveSong(0)), ([1, 2], NoSongSelected)) end;
test PlayList.eq(update(([0, 1, 2], PausedOn(0)), RemoveSong(0)), ([1, 2], NoSongSelected)) end;
test PlayList.eq(update(([0, 1, 2], Playing(1)), RemoveSong(0)), ([1, 2], Playing(1))) end;
test PlayList.eq(update(([0, 1, 2], PausedOn(1)), RemoveSong(0)), ([1, 2], PausedOn(1))) end;
test PlayList.eq(update(([0, 1, 2], Playing(1)), RemoveSong(3)), ([0, 1, 2], Playing(1))) end;

# Testing AddSong #
test PlayList.eq(update(([0, 1, 2], NoSongSelected), AddSong(3)), ([3, 0, 1, 2], NoSongSelected)) end;
test PlayList.eq(update(([0, 1, 2], Playing(0)), AddSong(3)), ([3, 0, 1, 2], Playing(0))) end;
test PlayList.eq(update(([0, 1, 2], PausedOn(0)), AddSong(3)), ([3, 0, 1, 2], PausedOn(0))) end;