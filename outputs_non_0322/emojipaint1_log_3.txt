

================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selected


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedE


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, available


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEm


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmoj


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis),


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | Select


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectE


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, em


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, available


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEm


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmoj


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | St


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | Stamp


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampE


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (update


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selected


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedE


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji),


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
      


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selected


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedE


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
      


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       available


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEm


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmoj


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | Clear


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (update


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, "


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""),


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
      


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selected


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedE


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
      


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       available


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEm


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmoj


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | Clear


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clear


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid),


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
      


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selected


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedE


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
      


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       available


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEm


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmoj


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | F


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | Fill


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fill


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRow


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowIn


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selected


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedE


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji),


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
      


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selected


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedE


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
      


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       available


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEm


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmoj


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
#


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the Em


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the Emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the Emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #




================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  +


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  +


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String, [(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String, [(String


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String, [(String,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String, [(String, String


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String, [(String, String)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String, [(String, String)],


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String, [(String, String)], [


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String, [(String, String)], [Html


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String, [(String, String)], [Html])


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String, [(String, String)], [Html]) in


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =
  fun (grid, selectedEmoji, availableEmojis), action ->
    case action
    | SelectEmoji(emoji) => (grid, emoji, availableEmojis)
    | StampEmoji(row, col) => 
      (updateGrid(grid, row, col, selectedEmoji), 
       selectedEmoji, 
       availableEmojis)
    | ClearCell(row, col) => 
      (updateGrid(grid, row, col, ""), 
       selectedEmoji, 
       availableEmojis)
    | ClearGrid => 
      (clearGrid(grid), 
       selectedEmoji, 
       availableEmojis)
    | FillRow(row) => 
      (fillRowInGrid(grid, row, selectedEmoji), 
       selectedEmoji, 
       availableEmojis) end in
  
# Render the EmojiPaint app model as a virtual DOM #

type Html =
  + Text(String)
  + Tag(String, [(String, String)], [Html]) in


