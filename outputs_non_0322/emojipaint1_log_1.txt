

================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model =


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action ->


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | Select


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectE


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | St


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | Stamp


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampE


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid =


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = update


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | Clear


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid =


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = update


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "")


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | Clear


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid =


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clear


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | F


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | Fill


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowTo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid =


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fill


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRow


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowIn


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowTo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
#


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single em


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let Em


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let Emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let Emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton:


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (E


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ?


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? ->


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) ->


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ?


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? =


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun em


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn"


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={on


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
#


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let Grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell:


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ?


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? ->


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) ->


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ?


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? =


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, on


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onSt


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
     


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
       


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
         


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
           


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji)


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
             


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              Em


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              Emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              Emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emo


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ ->


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> on


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onSt


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row,


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col))


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
           


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ?


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
       


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        |


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None =>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None => ?


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None => ? end


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None => ? end}


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None => ? end}



================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None => ? end}
   


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None => ? end}
    </


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None => ? end}
    </div


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None => ? end}
    </div>


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None => ? end}
    </div> end


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None => ? end}
    </div> end in


================

# Update the EmojiPaint app model based on an action #

let update: (Model, Action) -> Model = 
  fun model, action -> 
    case action
    | SelectEmoji(e) =>
      (model.0, e, model.2)
    | StampEmoji(row, col) => 
      let grid = updateGrid(model.0, row, col, model.1) in
      (grid, model.1, model.2)
    | ClearCell(row, col) => 
      let grid = updateGrid(model.0, row, col, "") in
      (grid, model.1, model.2)
    | ClearGrid =>
      let grid = clearGrid(model.0) in
      (grid, model.1, model.2)
    | FillRow(rowToFill) => 
      let grid = fillRowInGrid(model.0, rowToFill, model.1) in
      (grid, model.1, model.2) end in
  
# Render a single emoji button #
let EmojiButton: (Emoji, ? -> Action) -> ? = 
  fun emoji, onClick ->
    <button class="emoji-btn" onclick={onClick}>{emoji}</button> end in
  
# Render a single cell of the grid #
let GridCell: (Grid, Row, Col, ? -> Action) -> ? = 
  fun grid, row, col, onStamp ->
    <div class="grid-cell">
      {case List.nth(grid, row)
        | Some(rowList) => 
          case List.nth(rowList, col)  
            | Some(emoji) => 
              EmojiButton(emoji, fun _ -> onStamp(row, col)) 
            | None => ? end
        | None => ? end}
    </div> end in


