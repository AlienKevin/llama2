

================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Str


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, We


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Mod


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moder


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), Clear


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], We


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), Add


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
       


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
         


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion ==


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
       


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      )


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculate


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStr


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), Remove


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
       


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
         


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion ==


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
       


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      )


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculate


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStr


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), Update


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_str


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculate


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStr


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
       


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_str


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
#


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #




================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #

type


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #

type Msg


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #

type Msg =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #

type Msg = (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #

type Msg = (Action


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #

type Msg = (Action ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #

type Msg = (Action -> Action


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #

type Msg = (Action -> Action)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #

type Msg = (Action -> Action) in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
  
# View #

type Msg = (Action -> Action) in


