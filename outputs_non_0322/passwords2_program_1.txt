# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])
    else
      view(model)
in