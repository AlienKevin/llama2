

================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, Update


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculate


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStr


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), Add


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
    


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (f


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculate


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStr


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(f


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), Remove


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c ==


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculate


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStr


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, Clear


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], We


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
#


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword:


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type",


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value",


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder",


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ])


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria:


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [Password


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria]


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion:


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: Password


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
       


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
         


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a ==


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
           


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked",


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
         


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
         


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          )


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
         


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
           


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type",


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
           


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("on


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick",


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('"


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(Remove


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion))


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
         


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
       


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList:


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [Password


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria]


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class",


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    Min


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    Minimum


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    Re


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    Require


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUpper


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    Re


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    Require


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLower


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    Re


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    Require


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    Re


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    Require


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecial


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ]


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let un


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria:


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [Password


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria]


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filter


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a ==


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["on


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick",


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('"


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(Clear


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(un


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ])


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStr


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength:


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Str


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of:


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: Password


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStr


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | We


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Mod


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moder


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    |


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Str


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong =>


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green"


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style",


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:"


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(str


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(str


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view:


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(p


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewC


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(c


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStr


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(str


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
#


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app:


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
 


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _,


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) =


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength ==


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == We


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([],


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])
   


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])
    else


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])
    else



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])
    else
     


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])
    else
      view


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])
    else
      view(


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])
    else
      view(model


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])
    else
      view(model)


================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])
    else
      view(model)



================
# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model = fun m, action ->
  case m, action
  | _, UpdatePassword(s) =>
    let (pwd, crit, strength) = m in
      (s, crit, calculateStrength(s, crit))
      
  | (_, criteria, _), AddCriterion(criterion) =>
     (fst(m), criterion::criteria, calculateStrength(fst(m), criterion::criteria))
     
  | (pwd, criteria, strength), RemoveCriterion(criterion) =>
    let updated_criteria = List.filter(fun c -> not(c == criterion), criteria) in
      (pwd, updated_criteria, calculateStrength(pwd, updated_criteria))
      
  | _, ClearCriteria =>
    let (pwd, crit, strength) = m in
      (pwd, [], Weak)
  end
in
# View #
let viewPassword: Password -> Html.Html = fun pwd ->
  Html.input([
    ("type", "text"),
    ("value", pwd),
    ("placeholder", "Enter a password")
  ]) in
    
let viewCriteria: [PasswordCriteria] -> Html.Html = fun criteria ->
  let viewCriterion: PasswordCriteria -> Html.Html = fun criterion ->
    Html.li([], [
      Html.label([], [
        Html.input(
          (if List.mem((fun a b -> a == b), criteria, criterion) then 
            [("checked", "true")]
          else []
          ) @
          [
            ("type", "checkbox"),
            ("onclick", "send('" ^ to_string(RemoveCriterion(criterion)) ^ "')")
          ]),
        Html.span([], [to_string(criterion)]),
      ]),
    ])
  in
  
  let viewCriteriaList: [PasswordCriteria] -> Html.Html = fun criteria ->
    Html.ul(["class", "criteria"], List.map(viewCriterion, criteria))
  in
    
  let all_criteria = [
    MinimumLength(8),
    RequireUppercase,
    RequireLowercase,
    RequireNumber,
    RequireSpecialChar
  ] in
      
  let unselected_criteria: [PasswordCriteria] = List.filteri(fun idx c -> not(List.mem((fun a b -> a == b), criteria, c)), all_criteria) in
  
  Html.div([], [
    Html.button(["onclick", "send('" ^ to_string(ClearCriteria) ^ "')"], ["Reset"]),
    
    viewCriteriaList(unselected_criteria),
    viewCriteriaList(criteria)
  ]) in
      
let viewStrength: Strength -> Html.Html = fun strength -> 
  let color_of: PasswordStrength -> String = fun s ->
    case s 
    | Weak => "red"
    | Moderate => "yellow"
    | Strong => "green" end in
      
  Html.h2(["style", "color:" ^ (color_of(strength))], [to_string(strength)])
in
    
let view: Model -> Html.Html = fun m ->
  let (pwd, criteria, strength) = m in
    Html.div([], [
      viewPassword(pwd),
      viewCriteria(criteria),
      viewStrength(strength)
    ])
in
# Render #
let app: Model -> Html.Html = fun model ->
  let (_, _, strength) = model in
    if strength == Weak then
      Html.strong([], [view(model)])
    else
      view(model)
in

