

================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
 


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action -


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
   


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    |


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, Add


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddT


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo =>


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("",


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    |


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, Remove


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveT


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index)


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) =>


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("",


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    |


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, T


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, Toggle


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleT


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index)


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) =>


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("",


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    |


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, Update


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text)


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) =>


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos)


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in#


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO M


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MV


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU:


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and rend


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #




================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View:


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model ->


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> H


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
 


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos)


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
   


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_t


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo =


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
     


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~on


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev ->


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> Update


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~place


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder=


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add T


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo")


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
   


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list =


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.map


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
     


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_)


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
       


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
         


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "D


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE:


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: "


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "T


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO:


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: ");


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~on


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ ->


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> T


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> Toggle


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleT


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style=


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:"


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "light


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen"


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"),


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
       


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos)


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
   


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all =


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All",


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~on


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0))


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
   


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_t


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo;


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all]


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style=


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin:


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em")


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in#


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO M


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MV


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU:


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #



================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #




================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App =


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("T


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO",


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO", Model


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO", Model.


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO", Model.init


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO", Model.init,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO", Model.init, update


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO", Model.init, update,


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO", Model.init, update, View


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO", Model.init, update, View)


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO", Model.init, update, View) in


================
# TODO MVU: Handle TODO actions to update the app model #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | description, buffer, AddTodo => ("", add(description, buffer))
    | description, buffer, RemoveTodo(index) => ("", remove(index, buffer))
    | description, buffer, ToggleTodo(index) => ("", toggle(index, buffer))
    | _, todos, UpdateBuffer(text) => (text, todos) end in# TODO MVU: Create a view that takes the model and renders it as HTML #

let View: Model -> Html =
  fun (description, todos) -> 
    let input_todo = Input.create(
      "input",
      ~onChange=(fun ev -> UpdateBuffer(ev.value)),
      ~value=description, ~placeholder="Add Todo") in
    let todo_list = List.mapi(
      fun i, (desc, done_) =>
        Div.create(
          [Text.create(if !done_ then "DONE: " else "TODO: "); Text.create(desc)],
          ~onClick=(fun _ -> ToggleTodo(i)),
          ~style="background-color:" ++ if done_ then "lightgreen" else "white"), 
        todos) in
    let remove_all = Button.create("Remove All", ~onClick=(fun ev -> 0)) in
    Div.create([input_todo; remove_all] @ todo_list, ~style="margin: 1em") in# TODO MVU: Create the app and pass the initial model #

let App = App.create("TODO", Model.init, update, View) in


