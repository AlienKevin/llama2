# Non-negative ID for songs #
type Id = Int in

# Actions user can do in a playlist #
type PlayListAction =
  + PlaySong(Id)
  + PauseCurrentSong
  + RemoveSong(Id)
  # Add to the front of the playList, ignore duplication #
  + AddSong(Id)
in

# The state of the playlist #
type PlayListState =
  + Playing(Id)
  + PausedOn(Id)
  + NoSongSelected
in

# A playlist with a list of songs and the current state of the playlist #
type PlayList = ([Id], PlayListState) in

# Get all the song ids in the playlist #
let get_songs: PlayList -> [Id] =
  fun playlist ->
    let songs, current = playlist in
    songs 
in

# Get the id of the currently playing song #
let get_state: PlayList -> PlayListState =
  fun playlist ->
    let songs, state = playlist in
    state
in

# Update playlist based on action #
let update: (PlayList, PlayListAction) -> PlayList =
    fun playlist, action ->
        case action
        | PauseCurrentSong => 
            case get_state(playlist) 
            | Playing(id) => (get_songs(playlist) ,PausedOn(id) )
            | _ => playlist end
        | RemoveSong(id) => 
            let songs = List.filter(fun song -> id < song, get_songs(playlist) ) in
            (string_length(string_sub(string_of_int(id) , 1 , string_length(string_of_int(id) ) - 1) )   + string_length(string_sub(string_of_int(string_length(string_of_int(string_length(string_of_int(id) ) - 1)  ) ) , id + 2, string_length(string_of_int(id) ) ) )
              )
        | AddSong(id) => 
            let songs = List.filter(fun song -> id < song, get_songs(playlist) ) in
            (get_songs(playlist) @ [id] , NoSongSelected  )
        end
in