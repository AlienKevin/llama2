# A todo has a description and a status #
type Todo = (String, Bool) in

# A description input buffer and a todo list #
type Model = (String, [Todo]) in

type Action =
  + AddTodo
  + RemoveTodo(Int)
  + ToggleTodo(Int)
  + UpdateBuffer(String)
in

let Bool.eq: (Bool, Bool) -> Bool =
  fun (b1, b2) -> if b1 then b2 else !b2
in

let Todo.eq: (Todo, Todo) -> Bool =
  fun (d1, s1), (d2, s2) ->
    d1 $== d2 && Bool.eq(s1, s2)
in

let todo_list_eq: ([Todo], [Todo]) -> Bool =
    fun xs, ys ->
    case xs, ys
    | [], [] => true
    | x::xs, y::ys => Todo.eq(x, y) && todo_list_eq(xs, ys)
    | _ => false end
in

let Model.eq: (Model, Model) -> Bool =
  fun (b1, ts1), (b2, ts2) ->
    b1 $== b2 && todo_list_eq(ts1, ts2)
in

let Model.init: Model = ("", []) in

let Model.get_buffer: Model -> String =
  fun buffer, todo_list -> buffer
in

let Model.get_todo_list: Model -> [Todo] =
  fun buffer, todo_list -> todo_list
in

# Update todo list #
let update: (Model, Action) -> Model =
  fun model, action ->
    case action
    | AddTodo ->
        let new_todo_list = ("", false) :: model.get_todo_list() in
        ("", new_todo_list)
    | RemoveTodo(index) ->
        let old_todo_list = model.get_todo_list() in
        let new_todo_list = List.filter((fun (_: Int, x: Todo) -> x $!= (List.nth(old_todo_list, index))), List.indexed(old_todo_list)) |> List.map((fun x -> x.1), []) in
        (model.get_buffer(), new_todo_list)
    | ToggleTodo(index) -> 
        let old_todo_list = model.get_todo_list() in
        let new_todo_list = List.map((fun x -> if x $!= (List.nth(old_todo_list, index)) then ((x.0), !(x.1)) else x end), old_todo_list) in
        (model.get_buffer(), new_todo_list)
    | UpdateBuffer(buffer) -> (buffer, model.get_todo_list())
in