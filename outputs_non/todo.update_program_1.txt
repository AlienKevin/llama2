# A todo has a description and a status #
type Todo = (String, Bool) in

# A description input buffer and a todo list #
type Model = (String, [Todo]) in

type Action =
  + AddTodo
  + RemoveTodo(Int)
  + ToggleTodo(Int)
  + UpdateBuffer(String)
in

let Bool.eq: (Bool, Bool) -> Bool =
  fun (b1, b2) -> if b1 then b2 else !b2
in

let Todo.eq: (Todo, Todo) -> Bool =
  fun (d1, s1), (d2, s2) ->
    d1 $== d2 && Bool.eq(s1, s2)
in

let todo_list_eq: ([Todo], [Todo]) -> Bool =
    fun xs, ys ->
    case xs, ys
    | [], [] => true
    | x::xs, y::ys => Todo.eq(x, y) && todo_list_eq(xs, ys)
    | _ => false end
in

let Model.eq: (Model, Model) -> Bool =
  fun (b1, ts1), (b2, ts2) ->
    b1 $== b2 && todo_list_eq(ts1, ts2)
in

let Model.init: Model = ("", []) in

let Model.get_buffer: Model -> String =
  fun buffer, todo_list -> buffer
in

let Model.get_todo_list: Model -> [Todo] =
  fun buffer, todo_list -> todo_list
in

# Update todo list #
let update: (Model, Action) -> Model = 
    let add_todo_helper: (String, [Todo]) -> ([Todo], Int) = 
        fun string, todo_list -> 
            let index = List.length(todo_list) in 
            ((string, false)::todo_list, index)
    in
    
    fun model, action ->
    case model, action 
    | buffer, AddTodo =>
        if String.length(buffer) > 0 then
            let todo_list = Model.get_todo_list(model) in
            add_todo_helper(buffer, todo_list) |> (fun (x, _) -> x)
        else
            model
    | _, RemoveTodo(index) =>
        let todo_list = List.filter((fun (_, s) -> index <> s), Model.get_todo_list(model)) in
        ("", todo_list)
    | _, ToggleTodo(index) =>
        let todo_list = List.mapi((fun i (desc, done) -> if i = index then (desc, !done) else (desc, done)), Model.get_todo_list(model)) in
        ("", todo_list)
    | _, UpdateBuffer(buffer) =>
        ("", Model.get_todo_list(model))
in