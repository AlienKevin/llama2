# Non-negative ID for songs #
type Id = Int in

# Actions user can do in a playlist #
type PlayListAction =
  + PlaySong(Id)
  + PauseCurrentSong
  + RemoveSong(Id)
  # Add to the front of the playList, ignore duplication #
  + AddSong(Id)
in

# The state of the playlist #
type PlayListState =
  + Playing(Id)
  + PausedOn(Id)
  + NoSongSelected
in

# A playlist with a list of songs and the current state of the playlist #
type PlayList = ([Id], PlayListState) in

# Get all the song ids in the playlist #
let get_songs: PlayList -> [Id] =
  fun playlist ->
    let songs, current = playlist in
    songs 
in

# Get the id of the currently playing song #
let get_state: PlayList -> PlayListState =
  fun playlist ->
    let songs, state = playlist in
    state
in

# Update playlist based on action #
let update: (PlayList, PlayListAction) -> PlayList =
    fun pl, action ->
      case action 
        | PlaySong(id) =>
            match get_state(pl) with 
              | PausedOn(song_id) when song_id == id => ([get_songs(pl)], Playing(id))
              | _ => pl 
            end
        
        # If nothing is playing, no need to pause #
        | PauseCurrentSong =>
          match get_state(pl) with
            | Playing(song_id) -> ([get_songs(pl)], PausedOn(song_id))
            | _ => pl
          end
        
        | AddSong(id) => 
          if List.contains(fun song_id -> song_id == id, get_songs(pl)) then 
              pl 
          else 
              ([id::get_songs(pl)], NoSongSelected)
           end
        
        | RemoveSong(id) =>
            match get_state(pl) with
              # If there are other songs in the playlist, don't remove selected song from current state #
              | Playing(song_id) when song_id == id && List.length(get_songs(pl)) > 1 => ([List.filter(fun song_id -> song_id != id, get_songs(pl))], NoSongSelected)
              | PausedOn(song_id) when song_id == id && List.length(get_songs(pl)) > 1 => ([List.filter(fun song_id -> song_id != id, get_songs(pl))], NoSongSelected)
              
              # If there are other songs in the playlist, remove selected song from current state if it is playing #
              | Playing(song_id) when song_id == id && List.length(get_songs(pl)) > 1 => ([List.filter(fun song_id -> song_id != id, get_songs(pl))], NoSongSelected)
              
              # Otherwise remove the only song from playlist and current state #
              | _ => ([List.filter(fun song_id -> song_id != id, get_songs(pl))], NoSongSelected)
            end
      end
in