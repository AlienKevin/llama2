# Non-negative ID for songs #
type Id = Int in

# Actions user can do in a playlist #
type PlayListAction =
  + PlaySong(Id)
  + PauseCurrentSong
  + RemoveSong(Id)
  # Add to the front of the playList, ignore duplication #
  + AddSong(Id)
in

# The state of the playlist #
type PlayListState =
  + Playing(Id)
  + PausedOn(Id)
  + NoSongSelected
in

# A playlist with a list of songs and the current state of the playlist #
type PlayList = ([Id], PlayListState) in

# Get all the song ids in the playlist #
let get_songs: PlayList -> [Id] =
  fun playlist ->
    let songs, current = playlist in
    songs 
in

# Get the id of the currently playing song #
let get_state: PlayList -> PlayListState =
  fun playlist ->
    let songs, state = playlist in
    state
in

# Update playlist based on action #
let update: (PlayList, PlayListAction) -> PlayList = 
  fun playlist, action ->
    case action
    | PlaySong(songId) => 
      let songs, _ = playlist in
      if List.contains((=), songId, songs) then
        let newPlaylist = ([songId], PausedOn(songId)) in
        newPlaylist
      else
        playlist
    | PauseCurrentSong => 
      match get_state(playlist) with
      | Playing(songId) => ([songId], PausedOn(songId))
      | NoSongSelected => playlist
      | PausedOn(_) => playlist end
    | RemoveSong(songId) => 
      let songs, _ = playlist in
      if List.contains((=), songId, songs) then
        ([], NoSongSelected)
      else
        playlist
    | AddSong(songId) => 
      let songs, state = playlist in
      let newPlaylist = (songId::songs, state) in
      if List.contains((=), songId, get_songs(playlist)) then
        playlist
      else
        newPlaylist end
in