

================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Str


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong),


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (p


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, We


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Mod


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moder


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate),


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), Clear


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearC


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (p


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [],


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], We


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (p


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _),


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), Add


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddC


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria =


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
       


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
         


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion ==


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion),


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
       


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      )


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (p


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion],


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculate


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStr


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(p


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (p


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _),


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), Remove


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveC


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria =


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
       


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
         


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion ==


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion),


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
       


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      )


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (p


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculate


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStr


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(p


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_c


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _),


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), Update


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_str


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength =


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculate


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStr


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
       


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_str


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
#


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Str


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Check


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View =


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view:


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
       


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
         


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | Min


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | Minimum


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
         


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | Re


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | Require


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUpper


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "M


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain upper


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
         


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | Re


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | Require


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLower


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "M


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lower


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
         


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | Re


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | Require


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "M


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
         


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | Re


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | Require


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecial


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "M


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Str


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Str


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password!


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword:


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nC


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria:


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n"


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Mod


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moder


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Mod


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moder


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword:


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nC


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria:


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n"


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | We


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "We


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword:


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nC


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria:


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n"


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print =


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
#


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PA


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASS


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECK


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER M


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MV


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU AP


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPL


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app:


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View =


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let next


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read()


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit"


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" =>


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
     


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      |


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
       


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
         


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model,


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
         


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None ->


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
   


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(next


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel));


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(next


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main =


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 



================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
 


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(initial


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(initialModel


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(initialModel));


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(initialModel)); app


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(initialModel)); app(


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(initialModel)); app(initial


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(initialModel)); app(initialModel


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(initialModel)); app(initialModel)


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(initialModel)); app(initialModel) in


================

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(initialModel)); app(initialModel) in


