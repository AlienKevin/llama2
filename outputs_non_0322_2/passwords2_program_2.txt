# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun model, action ->
    case model, action
    | (_, _, Strong), _ => model
    | (pw, c, Weak \/ Moderate), ClearCriteria => (pw, [], Weak)
    | (pw, c, _), AddCriterion(new_criterion) => 
      let new_criteria = List.filter(
        fun old_criterion -> 
          not(old_criterion == new_criterion), 
        c
      ) in (pw, new_criteria @ [new_criterion], calculateStrength(pw, new_criteria @ [new_criterion]))
    | (pw, c, _), RemoveCriterion(old_criterion) => 
      let new_criteria = List.filter(
        fun criterion ->
          not(criterion == old_criterion), 
        c
      ) in (pw, new_criteria, calculateStrength(pw, new_criteria))
    | (_, _, _), UpdatePassword(new_password) =>
      let new_strength = calculateStrength(new_password, model.2) in 
        (new_password, model.1, new_strength)
  end in
    
# View Password Strength Checker app model #
type View = String in
let view: Model -> View =
  fun model ->
    let criteria_to_view =
      List.fold_left(fun acc, criterion ->
        match criterion with
          | MinimumLength(len) => acc ^ "Min length of " ^ string_of_int(len) ^ "\n"
          | RequireUppercase => acc ^ "Must contain uppercase letter.\n"
          | RequireLowercase => acc ^ "Must contain lowercase letter.\n"
          | RequireNumber => acc ^ "Must contain number.\n"
          | RequireSpecialChar => acc ^ "Must contain special character.\n"
      end, model.1)
    in
    match model.2 with
    | Strong => 
      "Strong password! \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Moderate => 
      "Moderate strength password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
    | Weak -> 
      "Weak password. \nPassword: " ^ model.0 ^ "\nCriteria: \n" ^ criteria_to_view
end in
  
let print = fun view ->
    print_string(view) end in
    
# PASSWORD CHECKER MVU APPLICATION #
let rec app: Model -> View = 
  fun model ->
    let nextModel =
      match read() with
      | "quit" => model
      | action_str -> 
        case action_of_string(action_str) of
          Some(action) -> update(model, action)
          None -> model end in
    print(view(nextModel)); app(nextModel) in
  
let main = 
  print(view(initialModel)); app(initialModel) in